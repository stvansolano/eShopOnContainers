# docker-compose --file src/docker-compose.catalog-api.yml --env-file ./src/dev.env up --exit-code-from test-server
# docker-compose --file src/docker-compose.catalog-api.yml --env-file ./src/dev.env up -d

version: '3.4'

services:
  sqldata:
    network_mode: bridge
    image: mcr.microsoft.com/mssql/server:2017-latest 
    environment:
      - SA_PASSWORD=${ESHOP_SQL_SERVER_SA_PASSWORD}
      - ACCEPT_EULA=Y
    ports:
      - "1433:1433"
    volumes:
      - eshop-sqldata:/var/opt/mssql

  rabbitmq:
    network_mode: bridge
    image: rabbitmq:3-management-alpine
    environment:
      - RABBITMQ_DEFAULT_USER=${ESHOP_SERVICE_BUS_USERNAME}
      - RABBITMQ_DEFAULT_PASS=${ESHOP_SERVICE_BUS_PASSWORD}
    ports:
      - "15672:15672"
      - "5672:5672"

  catalog-api:
    network_mode: bridge
    build:
      dockerfile: Services/Catalog/Catalog.API/Dockerfile
      context: .
    environment:
      - ConnectionString=Server=sqldata,1433;Database=Microsoft.eShopOnContainers.Services.CatalogDb;User Id=${ESHOP_SQL_SERVER_USERNAME};Password=${ESHOP_SQL_SERVER_SA_PASSWORD}
      - PicBaseUrl=${ESHOP_STORAGE_CATALOG_URL}
      - EventBusConnection=rabbitmq
      - EventBusUserName=${ESHOP_SERVICE_BUS_USERNAME}
      - EventBusPassword=${ESHOP_SERVICE_BUS_PASSWORD}
      - AzureStorageAccountName=${ESHOP_AZURE_STORAGE_CATALOG_NAME}
      - AzureStorageAccountKey=${ESHOP_AZURE_STORAGE_CATALOG_KEY}
      - UseCustomizationData=True
      - AzureServiceBusEnabled=False
      - AzureStorageEnabled=False
      - ApplicationInsights__InstrumentationKey=${INSTRUMENTATION_KEY}
      - OrchestratorType=${ORCHESTRATOR_TYPE}
      - GRPC_PORT=81
      - PORT=80
      - PATH_BASE=/catalog-api
    ports:
      - "5101:80"
      - "9101:81"
    depends_on:
      - rabbitmq
      - sqldata
    links:
      - rabbitmq
      - sqldata

  ##webstatus:
  ##  network_mode: bridge
    #image: ${REGISTRY:-eshop}/webstatus:${PLATFORM:-linux}-${TAG:-latest}
  ##  build:
  ##    context: . #src
  ##    dockerfile: Web/WebStatus/Dockerfile
  ##  depends_on:
  ##    - rabbitmq
  ##    - sqldata
  ##    - catalog-api
  
  unit-tests:
    network_mode: bridge
    build:
      context: . #src
      dockerfile: Services/Catalog/Catalog.FunctionalTests/Dockerfile
    environment:
      - ConnectionString=Server=sqldata,1433;Database=Microsoft.eShopOnContainers.Services.CatalogDb;User Id=${ESHOP_SQL_SERVER_USERNAME};Password=${ESHOP_SQL_SERVER_SA_PASSWORD}
      - PicBaseUrl=${ESHOP_STORAGE_CATALOG_URL}
      - EventBusConnection=rabbitmq
      - EventBusUserName=${ESHOP_SERVICE_BUS_USERNAME}
      - EventBusPassword=${ESHOP_SERVICE_BUS_PASSWORD}
      - AzureStorageAccountName=${ESHOP_AZURE_STORAGE_CATALOG_NAME}
      - AzureStorageAccountKey=${ESHOP_AZURE_STORAGE_CATALOG_KEY}
      - UseCustomizationData=True
      - AzureServiceBusEnabled=False
      - AzureStorageEnabled=False
      - ApplicationInsights__InstrumentationKey=${INSTRUMENTATION_KEY}
      - OrchestratorType=${ORCHESTRATOR_TYPE}
      - GRPC_PORT=81
      - PORT=80
      - PATH_BASE=/catalog-api
    command: >
      /bin/sh -c "
      dotnet test "/src/Services/Catalog/Catalog.UnitTests" /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura;
      sleep infinity"

  test-server:
    network_mode: bridge
    build:
      context: . #src
      dockerfile: Services/Catalog/Catalog.FunctionalTests/Dockerfile
    environment:
      - ConnectionString=Server=sqldata,1433;Database=Microsoft.eShopOnContainers.Services.CatalogDb;User Id=${ESHOP_SQL_SERVER_USERNAME};Password=${ESHOP_SQL_SERVER_SA_PASSWORD}
      - PicBaseUrl=${ESHOP_STORAGE_CATALOG_URL}
      - EventBusConnection=rabbitmq
      - EventBusUserName=${ESHOP_SERVICE_BUS_USERNAME}
      - EventBusPassword=${ESHOP_SERVICE_BUS_PASSWORD}
      - AzureStorageAccountName=${ESHOP_AZURE_STORAGE_CATALOG_NAME}
      - AzureStorageAccountKey=${ESHOP_AZURE_STORAGE_CATALOG_KEY}
      - UseCustomizationData=True
      - AzureServiceBusEnabled=False
      - AzureStorageEnabled=False
      - ApplicationInsights__InstrumentationKey=${INSTRUMENTATION_KEY}
      - OrchestratorType=${ORCHESTRATOR_TYPE}
      - GRPC_PORT=81
      - PORT=80
      - PATH_BASE=/catalog-api
    ports:
      - "5108:80"
    depends_on:
      - rabbitmq
      - sqldata
      - catalog-api
    links:
      - rabbitmq
      - sqldata
      - catalog-api
    command: >
      /bin/sh -c "
      echo Waiting for rabbitmq service start...;
      while ! nc -z rabbitmq 5672;
      do
        sleep 1;
      done;
      echo Connected!;
      dotnet test;
      "

volumes:
  eshop-sqldata:
    external: false

networks:
  default:
    external:
      name: test