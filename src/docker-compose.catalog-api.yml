# docker-compose --file src/docker-compose.catalog-api.yml --env-file ./src/dev.env up --exit-code-from test-server
# docker-compose --file src/docker-compose.catalog-api.yml --env-file ./src/dev.env up -d

version: '3.4'

services:
  sqldata:
    network_mode: bridge
    image: mcr.microsoft.com/mssql/server:2017-latest 
    environment:
      - SA_PASSWORD=${ESHOP_SQL_SERVER_SA_PASSWORD}
      - ACCEPT_EULA=Y
    ports:
      - "1433:1433"
    volumes:
      - eshop-sqldata:/var/opt/mssql

  rabbitmq:
    network_mode: bridge
    image: rabbitmq:3-management-alpine
    environment:
      - RABBITMQ_DEFAULT_USER=${ESHOP_SERVICE_BUS_USERNAME}
      - RABBITMQ_DEFAULT_PASS=${ESHOP_SERVICE_BUS_PASSWORD}
    ports:
      - "15672:15672"
      - "5672:5672"

  catalog-api:
    network_mode: bridge
    build:
      dockerfile: Services/Catalog/Catalog.API/Dockerfile
      context: .
    environment:
      - ConnectionString=Server=sqldata,1433;Database=Microsoft.eShopOnContainers.Services.CatalogDb;User Id=${ESHOP_SQL_SERVER_USERNAME};Password=${ESHOP_SQL_SERVER_SA_PASSWORD}
      - PicBaseUrl=${ESHOP_STORAGE_CATALOG_URL}
      - EventBusConnection=rabbitmq
      - EventBusUserName=${ESHOP_SERVICE_BUS_USERNAME}
      - EventBusPassword=${ESHOP_SERVICE_BUS_PASSWORD}
      - AzureStorageAccountName=${ESHOP_AZURE_STORAGE_CATALOG_NAME}
      - AzureStorageAccountKey=${ESHOP_AZURE_STORAGE_CATALOG_KEY}
      - UseCustomizationData=True
      - AzureServiceBusEnabled=False
      - AzureStorageEnabled=False
      - ApplicationInsights__InstrumentationKey=${INSTRUMENTATION_KEY}
      - OrchestratorType=${ORCHESTRATOR_TYPE}
      - GRPC_PORT=81
      - PORT=80
      - PATH_BASE=/catalog-api
    ports:
      - "5101:80"
      - "9101:81"
    depends_on:
      - rabbitmq
      - sqldata
    links:
      - rabbitmq
      - sqldata

  test-server:
    network_mode: bridge
    build:
      context: . #src
      dockerfile: Services/Catalog/Catalog.FunctionalTests/Dockerfile
    environment:
      - ConnectionString=Server=sqldata,1433;Database=Microsoft.eShopOnContainers.Services.CatalogDb;User Id=${ESHOP_SQL_SERVER_USERNAME};Password=${ESHOP_SQL_SERVER_SA_PASSWORD}
      - PicBaseUrl=${ESHOP_STORAGE_CATALOG_URL}
      - EventBusConnection=rabbitmq
      - EventBusUserName=${ESHOP_SERVICE_BUS_USERNAME}
      - EventBusPassword=${ESHOP_SERVICE_BUS_PASSWORD}
      - AzureStorageAccountName=${ESHOP_AZURE_STORAGE_CATALOG_NAME}
      - AzureStorageAccountKey=${ESHOP_AZURE_STORAGE_CATALOG_KEY}
      - UseCustomizationData=True
      - AzureServiceBusEnabled=False
      - AzureStorageEnabled=False
      - ApplicationInsights__InstrumentationKey=${INSTRUMENTATION_KEY}
      - OrchestratorType=${ORCHESTRATOR_TYPE}
      - GRPC_PORT=81
      - PORT=80
      - PATH_BASE=/catalog-api
    ports:
      - "5108:80"
    depends_on:
      - rabbitmq
      - sqldata
      - catalog-api
    links:
      - rabbitmq
      - sqldata
      - catalog-api
    command: >
      /bin/sh -c "
      echo Waiting for rabbitmq service start...;
      while ! nc -z rabbitmq 5672;
      do
        sleep 1;
      done;
      echo Connected!;
      dotnet test;
      "

  identity-api:
    network_mode: bridge
    image: ${REGISTRY:-eshop}/identity.api:${PLATFORM:-linux}-${TAG:-latest}
    build:
      context: .
      dockerfile: Services/Identity/Identity.API/Dockerfile
    depends_on:
        - sqldata
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://0.0.0.0:80
      - SpaClient=http://${ESHOP_EXTERNAL_DNS_NAME_OR_IP}:5104
      - XamarinCallback=http://${ESHOP_PROD_EXTERNAL_DNS_NAME_OR_IP}:5105/xamarincallback
      - ConnectionString=Server=sqldata,1433;Database=Microsoft.eShopOnContainers.Services.IdentityDb;User Id=${ESHOP_SQL_SERVER_USERNAME};Password=${ESHOP_SQL_SERVER_SA_PASSWORD}
      - MvcClient=http://${ESHOP_EXTERNAL_DNS_NAME_OR_IP}:5100
      - LocationApiClient=http://${ESHOP_EXTERNAL_DNS_NAME_OR_IP}:5109
      - MarketingApiClient=http://${ESHOP_EXTERNAL_DNS_NAME_OR_IP}:5110
      - BasketApiClient=http://${ESHOP_EXTERNAL_DNS_NAME_OR_IP}:5103
      - OrderingApiClient=http://${ESHOP_EXTERNAL_DNS_NAME_OR_IP}:5102
      - MobileShoppingAggClient=http://${ESHOP_EXTERNAL_DNS_NAME_OR_IP}:5120
      - WebShoppingAggClient=http://${ESHOP_EXTERNAL_DNS_NAME_OR_IP}:5121
      - WebhooksApiClient=http://${ESHOP_EXTERNAL_DNS_NAME_OR_IP}:5113
      - WebhooksWebClient=http://${ESHOP_EXTERNAL_DNS_NAME_OR_IP}:5114
      - UseCustomizationData=True
      - ApplicationInsights__InstrumentationKey=${INSTRUMENTATION_KEY}
      - OrchestratorType=${ORCHESTRATOR_TYPE}
    links:
        - sqldata
    ports:
      - "5105:80"

  ordering-api:
    network_mode: bridge
    image: ${REGISTRY:-eshop}/ordering.api:${PLATFORM:-linux}-${TAG:-latest}
    build:
      context: .
      dockerfile: Services/Ordering/Ordering.API/Dockerfile.develop
    depends_on:
      - sqldata
      - rabbitmq
      - identity-api
    links:
      - sqldata
      - rabbitmq
      - identity-api
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://0.0.0.0:80
      - ConnectionString=Server=sqldata,1433;Database=Microsoft.eShopOnContainers.Services.IdentityDb;User Id=${ESHOP_SQL_SERVER_USERNAME};Password=${ESHOP_SQL_SERVER_SA_PASSWORD}
      - IdentityUrl=http://${ESHOP_EXTERNAL_DNS_NAME_OR_IP}:5105
      - IdentityUrlExternal=http://${ESHOP_EXTERNAL_DNS_NAME_OR_IP}:5105
      - EventBusConnection=rabbitmq
      - EventBusUserName=${ESHOP_SERVICE_BUS_USERNAME}
      - EventBusPassword=${ESHOP_SERVICE_BUS_PASSWORD}
      - UseCustomizationData=True
      - AzureServiceBusEnabled=False
      - CheckUpdateTime=30000
      - ApplicationInsights__InstrumentationKey=${INSTRUMENTATION_KEY}
      - OrchestratorType=${ORCHESTRATOR_TYPE}
      - UseLoadTest=${USE_LOADTEST:-False}
      - Serilog__MinimumLevel__Override__Microsoft.eShopOnContainers.BuildingBlocks.EventBusRabbitMQ=Verbose
      - Serilog__MinimumLevel__Override__ordering-api=Verbose
      - PATH_BASE=/ordering-api
      - GRPC_PORT=81
      - PORT=80
    ports:
      - "5102:80"
      - "9102:81"

  webstatus:
    network_mode: bridge
    image: ${REGISTRY:-eshop}/webstatus:${PLATFORM:-linux}-${TAG:-latest}
    build:
      context: . #src
      dockerfile: Web/WebStatus/Dockerfile
    depends_on:
      - rabbitmq
      - sqldata
      - catalog-api
      - ordering-api
    links:
      - rabbitmq
      - sqldata
      - catalog-api
      - identity-api
      - ordering-api
    ports:
      - "5107:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://0.0.0.0:80
      - HealthChecksUI__HealthChecks__0__Name=WebMVC HTTP Check
      - HealthChecksUI__HealthChecks__0__Uri=http://webmvc/hc
      - HealthChecksUI__HealthChecks__1__Name=WebSPA HTTP Check
      - HealthChecksUI__HealthChecks__1__Uri=http://webspa/hc
      - HealthChecksUI__HealthChecks__2__Name=Web Shopping Aggregator GW HTTP Check
      - HealthChecksUI__HealthChecks__2__Uri=http://webshoppingagg/hc
      - HealthChecksUI__HealthChecks__3__Name=Mobile Shopping Aggregator HTTP Check
      - HealthChecksUI__HealthChecks__3__Uri=http://mobileshoppingagg/hc
      - HealthChecksUI__HealthChecks__4__Name=Ordering HTTP Check
      - HealthChecksUI__HealthChecks__4__Uri=http://ordering-api/hc
      - HealthChecksUI__HealthChecks__5__Name=Basket HTTP Check
      - HealthChecksUI__HealthChecks__5__Uri=http://basket-api/hc
      - HealthChecksUI__HealthChecks__6__Name=Catalog HTTP Check
      - HealthChecksUI__HealthChecks__6__Uri=http://catalog-api/hc
      - HealthChecksUI__HealthChecks__7__Name=Identity HTTP Check
      - HealthChecksUI__HealthChecks__7__Uri=http://identity-api/hc
      - HealthChecksUI__HealthChecks__8__Name=Marketing HTTP Check
      - HealthChecksUI__HealthChecks__8__Uri=http://marketing-api/hc
      - HealthChecksUI__HealthChecks__9__Name=Locations HTTP Check
      - HealthChecksUI__HealthChecks__9__Uri=http://locations-api/hc
      - HealthChecksUI__HealthChecks__10__Name=Payments HTTP Check
      - HealthChecksUI__HealthChecks__10__Uri=http://payment-api/hc
      - HealthChecksUI__HealthChecks__11__Name=Ordering SignalRHub HTTP Check
      - HealthChecksUI__HealthChecks__11__Uri=http://ordering-signalrhub/hc
      - HealthChecksUI__HealthChecks__12__Name=Ordering HTTP Background Check
      - HealthChecksUI__HealthChecks__12__Uri=http://ordering-backgroundtasks/hc
      - ApplicationInsights__InstrumentationKey=${INSTRUMENTATION_KEY}
      - OrchestratorType=${ORCHESTRATOR_TYPE}
      
volumes:
  eshop-sqldata:
    external: false

  #unit-tests:
  #  network_mode: bridge
  #  build:
  #    context: . #src
  #    dockerfile: Services/Catalog/Catalog.FunctionalTests/Dockerfile
  #  environment:
  #    - ConnectionString=Server=sqldata,1433;Database=Microsoft.eShopOnContainers.Services.CatalogDb;User Id=${ESHOP_SQL_SERVER_USERNAME};Password=${ESHOP_SQL_SERVER_SA_PASSWORD}
  #    - PicBaseUrl=${ESHOP_STORAGE_CATALOG_URL}
  #    - EventBusConnection=rabbitmq
  #    - EventBusUserName=${ESHOP_SERVICE_BUS_USERNAME}
  #    - EventBusPassword=${ESHOP_SERVICE_BUS_PASSWORD}
  #    - AzureStorageAccountName=${ESHOP_AZURE_STORAGE_CATALOG_NAME}
  #    - AzureStorageAccountKey=${ESHOP_AZURE_STORAGE_CATALOG_KEY}
  #    - UseCustomizationData=True
  #    - AzureServiceBusEnabled=False
  #    - AzureStorageEnabled=False
  #    - ApplicationInsights__InstrumentationKey=${INSTRUMENTATION_KEY}
  #    - OrchestratorType=${ORCHESTRATOR_TYPE}
  #    - GRPC_PORT=81
  #    - PORT=80
  #    - PATH_BASE=/catalog-api
  #  command: >
  #    /bin/sh -c "
  #    cd /src/Services/Catalog/Catalog.UnitTests
  #    ;dotnet test /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura
  #    ;reportgenerator -reports:/src/Services/Catalog/Catalog.UnitTests/coverage.cobertura.xml \
  #                     -targetdir:coveragereport \
  #                     -reporttypes:Html
  #    ;sleep infinity"
